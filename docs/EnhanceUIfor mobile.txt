Sourdough App: Recipe Page UX Refactor Plan
This document outlines the steps to refactor the recipe creation and editing page for a more intuitive and responsive user experience on both mobile and web.
Phase 1: Universal UI/UX Enhancements (Good for All Platforms)
These changes will improve usability regardless of the device.
Task 1.1: Implement Collapsible Step Cards (Accordion)
Goal: Reduce initial visual clutter by making each StepCard collapsible.
Modify StepCard.tsx State:
Introduce a new state variable, isExpanded, initialized to false.
The StepCard should also accept an isExpanded prop and a handler function onToggleExpand.
Create a Collapsible Header:
The StepCard's header (containing the step name and action buttons) should always be visible.
Add an onClick event to this header that calls the onToggleExpand handler.
Conditionally Render the Body:
The body of the StepCard (containing fields and the StepIngredientTable) should only be rendered if isExpanded is true.
Manage State in StepColumn.tsx:
Create a state variable in StepColumn.tsx to manage which StepCard is currently expanded (e.g., expandedStepId).
When a user clicks a StepCard header, update this state to that card's ID.
Phase 2: Responsive UI for Core Components
These tasks focus on making key components adapt correctly to different screen sizes.
Task 2.1: Create a Responsive Action Bar
Goal: Ensure primary actions ("Save", "Start Bake") are always accessible.
Create a new component ResponsiveActionBar.tsx:
This component will contain the "Update / Save" and "Start Bake" buttons.
Apply Responsive Styling:
Mobile (small screens): Use Tailwind CSS classes to make the bar a "sticky" footer (sm:fixed sm:bottom-0 sm:left-0 sm:right-0).
Desktop (larger screens): On md breakpoints and up, the component should render as a normal part of the layout, ideally as a sticky header (md:sticky md:top-0).
Integrate into RecipeLayout.tsx:
Replace the current location of the action buttons with the new <ResponsiveActionBar /> component.
Task 2.2: Redesign Ingredient Input for Responsiveness
Goal: Make the StepIngredientTable usable on narrow screens.
Analyze StepIngredientTable.tsx:
The main container for an ingredient row is a flexbox (<div className="flex ...">).
Apply Responsive Flex Direction:
On small screens, change the flex direction to flex-col.
On medium screens and up (md:), revert to flex-row.
Adjust Alignment and Spacing:
When in flex-col, adjust the alignment of items to items-start.
Use responsive spacing utilities (gap-2 sm:gap-4) to ensure the layout looks good on all screen sizes.
Phase 3: Final Polish and Review
These final touches will improve clarity and ensure everything works as expected.
Task 3.1: Clarify Automated Calculations
Goal: Explain to the user why the last flour input is sometimes disabled.
Locate the Logic in StepIngredientTable.tsx:
Find the code that adds the disabled attribute to the amount input for the last flour ingredient.
Conditionally Render Helper Text:
Alongside the disabled input, render a small text element (e.g., <p class="text-xs text-gray-500">).
The text should read something like: "Calculated automatically to total 100%."
Task 3.2: Implement Toast Notifications
Goal: Provide non-intrusive feedback for user actions.
Choose and Install a Toast Library:
Select a library like react-hot-toast or react-toastify.
Add Toast Provider to App.tsx:
Wrap your application's root component with the toast provider.
Replace showToast Comments:
In RecipeControls.tsx, find all instances of // TODO: showToast(...).
Replace these comments with actual calls to the toast library's functions (e.g., toast.success('Recipe saved!')).
Task 3.3: Cross-Platform Testing
Goal: Verify that the new responsive design works correctly.
Web Browser:
Use your browser's developer tools to simulate different device sizes, from a small phone to a large desktop monitor.
Confirm that the layout changes at the correct breakpoints.
Capacitor:
Run the app on an actual device or simulator (iOS and Android).
Verify that all touch targets are large enough and that all functionality works as expected.
