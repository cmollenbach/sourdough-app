"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const client_1 = require("@prisma/client"); // Added Prisma
const authMiddleware_1 = require("../middleware/authMiddleware"); // Corrected import names
const prisma_1 = __importDefault(require("../lib/prisma"));
const logger_1 = __importDefault(require("../lib/logger"));
const validation_1 = require("../middleware/validation");
const recipeSchemas_1 = require("../validation/recipeSchemas");
const router = express_1.default.Router();
// All routes in this file will be protected
router.use(authMiddleware_1.authenticateJWT); // Corrected usage
// --- Define Endpoint Logic Below ---
// GET /api/bakes/active: Fetches all bakes for the logged-in user where active = true.
router.get('/active', async (req, res, next) => {
    const ownerId = req.user?.userId; // Corrected to use userId
    if (!ownerId) {
        return res.status(401).json({ message: 'User not authenticated.' }); // Changed to 401 for unauthenticated
    }
    try {
        const activeBakes = await prisma_1.default.bake.findMany({
            where: {
                ownerId: ownerId,
                active: true,
            },
            include: {
                steps: {
                    orderBy: { order: 'asc' },
                    include: {
                        parameterValues: { include: { parameter: true } },
                        ingredients: { include: { ingredient: true } },
                        recipeStep: {
                            select: { description: true, stepTemplate: { select: { name: true } } }
                        }
                    },
                },
                recipe: { select: { name: true } },
            },
            orderBy: { startTimestamp: 'desc' },
        });
        res.json(activeBakes);
    }
    catch (error) {
        next(error);
    }
});
// GET /api/bakes: Fetches all bakes (active and inactive) for the logged-in user.
router.get('/', async (req, res, next) => {
    const ownerId = req.user?.userId;
    if (!ownerId) {
        return res.status(401).json({ message: 'User not authenticated.' });
    }
    try {
        const allBakes = await prisma_1.default.bake.findMany({
            where: {
                ownerId: ownerId,
            },
            include: {
                // For a history list, we might not need full step details initially.
                // Let's include basic recipe info and step count for now.
                // Full details can be fetched when viewing a specific historical bake.
                recipe: { select: { name: true } },
                _count: {
                    select: { steps: true }
                }
            },
            orderBy: { startTimestamp: 'desc' }, // Show most recent first
        });
        // Transform the result to include stepCount directly
        const bakesWithStepCount = allBakes.map(bake => ({
            ...bake,
            stepCount: bake._count?.steps,
        }));
        res.json(bakesWithStepCount);
    }
    catch (error) {
        next(error);
    }
});
// GET /api/bakes/:bakeId: Fetches a single bake by its ID for the logged-in user.
router.get('/:bakeId', async (req, res, next) => {
    const ownerId = req.user?.userId;
    const { bakeId } = req.params;
    if (!ownerId) {
        return res.status(401).json({ message: 'User not authenticated.' });
    }
    try {
        const bake = await prisma_1.default.bake.findFirst({
            where: {
                id: Number(bakeId),
                ownerId: ownerId, // Ensure the user owns this bake
            },
            include: {
                steps: {
                    orderBy: { order: 'asc' },
                    include: {
                        parameterValues: { include: { parameter: true } },
                        ingredients: { include: { ingredient: true } },
                        recipeStep: {
                            select: { description: true, stepTemplate: { select: { name: true } } }
                        }
                    },
                },
                recipe: { select: { name: true } },
                owner: { select: { userProfile: { select: { displayName: true } }, email: true } },
            },
        });
        if (!bake) {
            return res.status(404).json({ message: 'Bake not found or user not authorized.' });
        }
        res.json(bake);
    }
    catch (error) {
        next(error);
    }
});
// POST /api/bakes: Creates a new bake and snapshots the recipe steps.
router.post('/', async (req, res, next) => {
    const { recipeId, notes: bakeNotes } = req.body;
    const ownerId = req.user?.userId; // Corrected to use userId
    if (!ownerId) {
        return res.status(401).json({ message: 'User not authenticated.' }); // Changed to 401
    }
    if (!recipeId) {
        return res.status(400).json({ message: 'Recipe ID is required.' });
    }
    try {
        const recipe = await prisma_1.default.recipe.findUnique({
            where: { id: Number(recipeId) },
            include: {
                steps: {
                    orderBy: { order: 'asc' },
                    include: {
                        parameterValues: { include: { parameter: true } },
                        ingredients: { include: { ingredient: true } },
                    },
                },
            },
        });
        if (!recipe) {
            return res.status(404).json({ message: 'Recipe not found.' });
        }
        const newBake = await prisma_1.default.$transaction(async (tx) => {
            const bake = await tx.bake.create({
                data: {
                    ownerId: ownerId,
                    recipeId: recipe.id,
                    notes: bakeNotes || `Bake of ${recipe.name}`,
                    active: true,
                    startTimestamp: new Date(),
                    // Snapshot recipe targets
                    recipeTotalWeightSnapshot: recipe.totalWeight,
                    recipeHydrationPctSnapshot: recipe.hydrationPct,
                    recipeSaltPctSnapshot: recipe.saltPct,
                },
            });
            for (const recipeStep of recipe.steps) {
                const createdBakeStep = await tx.bakeStep.create({
                    data: {
                        bakeId: bake.id,
                        recipeStepId: recipeStep.id,
                        order: recipeStep.order,
                        status: client_1.StepExecutionStatus.PENDING,
                    },
                });
                for (const pVal of recipeStep.parameterValues) {
                    await tx.bakeStepParameterValue.create({
                        data: {
                            bakeStepId: createdBakeStep.id,
                            parameterId: pVal.parameterId,
                            plannedValue: pVal.value === null ? client_1.Prisma.JsonNull : pVal.value, // Handle null for JSON
                        },
                    });
                }
                for (const rIng of recipeStep.ingredients) {
                    await tx.bakeStepIngredient.create({
                        data: {
                            bakeStepId: createdBakeStep.id,
                            ingredientId: rIng.ingredientId,
                            plannedPercentage: rIng.amount, // Assuming RecipeStepIngredient.amount is the percentage
                            plannedPreparation: rIng.preparation,
                        },
                    });
                }
            }
            return bake;
        });
        const detailedBake = await prisma_1.default.bake.findUnique({
            where: { id: newBake.id },
            include: {
                steps: {
                    orderBy: { order: 'asc' },
                    include: {
                        parameterValues: { include: { parameter: true } },
                        ingredients: { include: { ingredient: true } },
                        recipeStep: { select: { description: true, stepTemplate: { select: { name: true } } } }
                    },
                },
                recipe: { select: { name: true } },
                owner: { select: { userProfile: { select: { displayName: true } }, email: true } },
            },
        });
        return res.status(201).json(detailedBake);
    }
    catch (error) {
        next(error);
    }
});
// PUT /api/bakes/:bakeId/notes: Updates the notes for a specific bake.
router.put('/:bakeId/notes', (0, validation_1.validateParams)(recipeSchemas_1.bakeIdParamSchema), (0, validation_1.validateBody)(recipeSchemas_1.updateBakeNotesSchema), async (req, res, next) => {
    const ownerId = req.user?.userId;
    const { bakeId } = req.params;
    const { notes } = req.body; // Expecting new notes string
    try {
        const bake = await prisma_1.default.bake.findFirst({ where: { id: Number(bakeId), ownerId: ownerId } });
        if (!bake) {
            return res.status(404).json({ message: 'Bake not found or user not authorized.' });
        }
        const updatedBake = await prisma_1.default.bake.update({
            where: { id: Number(bakeId) },
            data: { notes: notes }, // notes can be null if user clears it
        });
        res.json(updatedBake); // Return the updated bake object
    }
    catch (error) {
        next(error);
    }
});
// PUT /api/bakes/:bakeId/rating: Updates the rating for a specific bake.
router.put('/:bakeId/rating', (0, validation_1.validateParams)(recipeSchemas_1.bakeIdParamSchema), (0, validation_1.validateBody)(recipeSchemas_1.updateBakeRatingSchema), async (req, res, next) => {
    const ownerId = req.user?.userId;
    const { bakeId } = req.params;
    const { rating } = req.body; // Expecting new rating (number 1-5)
    try {
        const bake = await prisma_1.default.bake.findFirst({ where: { id: Number(bakeId), ownerId: ownerId } });
        if (!bake) {
            return res.status(404).json({ message: 'Bake not found or user not authorized.' });
        }
        const updatedBake = await prisma_1.default.bake.update({ where: { id: Number(bakeId) }, data: { rating } });
        res.json(updatedBake);
    }
    catch (error) {
        next(error);
    }
});
// PUT /api/bakes/:bakeId/complete: Marks a bake as complete (sets active to false and records finishTimestamp).
router.put('/:bakeId/complete', async (req, res, next) => {
    const ownerId = req.user?.userId;
    const { bakeId } = req.params;
    try {
        const bake = await prisma_1.default.bake.findFirst({ where: { id: Number(bakeId), ownerId: ownerId } });
        if (!bake) {
            return res.status(404).json({ message: 'Bake not found or user not authorized.' });
        }
        if (!bake.active) {
            return res.status(400).json({ message: 'This bake is already inactive.' });
        }
        const updatedBake = await prisma_1.default.bake.update({
            where: { id: Number(bakeId) },
            data: { active: false, finishTimestamp: new Date() },
        });
        res.json(updatedBake);
    }
    catch (error) {
        next(error);
    }
});
// PUT /api/bakes/:bakeId/cancel: Sets the bake active to false and records finishTimestamp.
router.put('/:bakeId/cancel', async (req, res, next) => {
    const ownerId = req.user?.userId; // Corrected to use userId
    const { bakeId } = req.params;
    try {
        const bake = await prisma_1.default.bake.findFirst({ where: { id: Number(bakeId), ownerId: ownerId } });
        if (!bake) {
            return res.status(404).json({ message: 'Bake not found or user not authorized.' });
        }
        const updatedBake = await prisma_1.default.bake.update({
            where: { id: Number(bakeId) },
            data: { active: false, finishTimestamp: new Date() },
        });
        res.json(updatedBake);
    }
    catch (error) {
        next(error);
    }
});
// PUT /api/bakes/:bakeId/steps/:stepId/start: Sets step status to IN_PROGRESS and records startTimestamp.
router.put('/:bakeId/steps/:stepId/start', async (req, res, next) => {
    const ownerId = req.user?.userId; // Corrected to use userId
    const { bakeId: bakeIdStr, stepId: stepIdStr } = req.params;
    const bakeId = Number(bakeIdStr);
    const stepId = Number(stepIdStr);
    try {
        const bake = await prisma_1.default.bake.findFirst({ where: { id: bakeId, ownerId: ownerId } });
        if (!bake) {
            return res.status(404).json({ message: 'Bake not found or user not authorized.' });
        }
        if (!bake.active) {
            return res.status(400).json({ message: 'Cannot modify an inactive bake.' });
        }
        const updatedStep = await prisma_1.default.bakeStep.update({
            where: { id: stepId, bakeId: bakeId },
            data: {
                status: client_1.StepExecutionStatus.IN_PROGRESS,
                startTimestamp: new Date(),
            },
        });
        res.json(updatedStep);
    }
    catch (error) {
        next(error);
    }
});
// PUT /api/bakes/:bakeId/steps/:stepId/complete: Sets step status to COMPLETED, records finishTimestamp.
// Also handles recording actualParameterValues, notes, deviations for the BakeStep.
router.put('/:bakeId/steps/:stepId/complete', async (req, res, next) => {
    const ownerId = req.user?.userId; // Corrected to use userId
    const { bakeId: bakeIdStr, stepId: stepIdStr } = req.params;
    const bakeId = Number(bakeIdStr);
    const stepId = Number(stepIdStr);
    const { actualParameterValues, notes, deviations } = req.body; // actualParameterValues: { [parameterId: number]: any }
    try {
        const bake = await prisma_1.default.bake.findFirst({ where: { id: bakeId, ownerId: ownerId } });
        if (!bake) {
            return res.status(404).json({ message: 'Bake not found or user not authorized.' });
        }
        if (!bake.active) {
            return res.status(400).json({ message: 'Cannot modify an inactive bake.' });
        }
        const now = new Date();
        const stepToComplete = await prisma_1.default.bakeStep.findUnique({ where: { id: stepId, bakeId: bakeId } });
        if (!stepToComplete) {
            return res.status(404).json({ message: 'Step not found for this bake.' });
        }
        const dataToUpdate = {
            status: client_1.StepExecutionStatus.COMPLETED,
            finishTimestamp: now,
        };
        if (notes !== undefined)
            dataToUpdate.notes = notes;
        if (deviations !== undefined)
            dataToUpdate.deviations = deviations;
        await prisma_1.default.bakeStep.update({
            where: { id: stepId },
            data: dataToUpdate,
        });
        if (actualParameterValues && typeof actualParameterValues === 'object') {
            for (const [paramIdStr, value] of Object.entries(actualParameterValues)) {
                const paramId = Number(paramIdStr);
                const bspv = await prisma_1.default.bakeStepParameterValue.findFirst({
                    where: { bakeStepId: stepId, parameterId: paramId }
                });
                if (bspv) {
                    await prisma_1.default.bakeStepParameterValue.update({
                        where: { id: bspv.id },
                        data: { actualValue: value === null ? client_1.Prisma.JsonNull : value }, // Handle null for JSON
                    });
                }
                else {
                    logger_1.default.warn('BakeStepParameterValue not found when recording actual value', {
                        stepId,
                        parameterId: paramId,
                        bakeId: req.params.bakeId
                    });
                }
            }
        }
        const finalUpdatedStep = await prisma_1.default.bakeStep.findUnique({
            where: { id: stepId },
            include: { parameterValues: { include: { parameter: true } } }
        });
        res.json(finalUpdatedStep);
    }
    catch (error) {
        next(error);
    }
});
// PUT /api/bakes/:bakeId/steps/:stepId/skip: Sets step status to SKIPPED.
router.put('/:bakeId/steps/:stepId/skip', async (req, res, next) => {
    const ownerId = req.user?.userId; // Corrected to use userId
    const { bakeId: bakeIdStr, stepId: stepIdStr } = req.params;
    const bakeId = Number(bakeIdStr);
    const stepId = Number(stepIdStr);
    try {
        const bake = await prisma_1.default.bake.findFirst({ where: { id: bakeId, ownerId: ownerId } });
        if (!bake) {
            return res.status(404).json({ message: 'Bake not found or user not authorized.' });
        }
        if (!bake.active) {
            return res.status(400).json({ message: 'Cannot modify an inactive bake.' });
        }
        const updatedStep = await prisma_1.default.bakeStep.update({
            where: { id: stepId, bakeId: bakeId },
            data: { status: client_1.StepExecutionStatus.SKIPPED, finishTimestamp: new Date() },
        });
        res.json(updatedStep);
    }
    catch (error) {
        next(error);
    }
});
// PUT /api/bakes/:bakeId/steps/:stepId/parameters/:parameterValueId/actual: Updates actualValue for a specific BakeStepParameterValue.
router.put('/:bakeId/steps/:stepId/parameters/:parameterValueId/actual', async (req, res, next) => {
    const ownerId = req.user?.userId; // Corrected to use userId
    const { bakeId: bakeIdStr, stepId: stepIdStr, parameterValueId: bspvIdStr } = req.params;
    const bakeId = Number(bakeIdStr);
    const stepId = Number(stepIdStr);
    const bspvId = Number(bspvIdStr);
    const { actualValue, notes } = req.body;
    if (actualValue === undefined) {
        return res.status(400).json({ message: 'Actual value is required.' });
    }
    try {
        const bake = await prisma_1.default.bake.findFirst({ where: { id: bakeId, ownerId: ownerId } });
        if (!bake) {
            return res.status(404).json({ message: 'Bake not found or user not authorized.' });
        }
        if (!bake.active) {
            return res.status(400).json({ message: 'Cannot modify an inactive bake.' });
        }
        const bspv = await prisma_1.default.bakeStepParameterValue.findFirst({ where: { id: bspvId, bakeStepId: stepId } });
        if (!bspv) {
            return res.status(404).json({ message: 'Parameter value record not found for this step.' });
        }
        const dataToUpdate = { actualValue: actualValue === null ? client_1.Prisma.JsonNull : actualValue }; // Handle null for JSON
        if (notes !== undefined)
            dataToUpdate.notes = notes;
        const updatedParamValue = await prisma_1.default.bakeStepParameterValue.update({
            where: { id: bspvId },
            data: dataToUpdate,
        });
        res.json(updatedParamValue);
    }
    catch (error) {
        next(error);
    }
});
// PUT /api/bakes/:bakeId/steps/:stepId/note: Updates the notes field for a BakeStep.
router.put('/:bakeId/steps/:stepId/note', async (req, res, next) => {
    const ownerId = req.user?.userId; // Corrected to use userId
    const { bakeId: bakeIdStr, stepId: stepIdStr } = req.params;
    const bakeId = Number(bakeIdStr);
    const stepId = Number(stepIdStr);
    const { notes } = req.body;
    if (notes === undefined) {
        return res.status(400).json({ message: 'Notes field is required.' });
    }
    try {
        const bake = await prisma_1.default.bake.findFirst({ where: { id: bakeId, ownerId: ownerId } });
        if (!bake) {
            return res.status(404).json({ message: 'Bake not found or user not authorized.' });
        }
        if (!bake.active) {
            return res.status(400).json({ message: 'Cannot modify an inactive bake.' });
        }
        const updatedStep = await prisma_1.default.bakeStep.update({
            where: { id: stepId, bakeId: bakeId },
            data: { notes: notes },
        });
        res.json(updatedStep);
    }
    catch (error) {
        next(error);
    }
});
// PUT /api/bakes/:bakeId/steps/:stepId/deviations: Updates the deviations field for a BakeStep.
router.put('/:bakeId/steps/:stepId/deviations', async (req, res, next) => {
    const ownerId = req.user?.userId;
    const { bakeId: bakeIdStr, stepId: stepIdStr } = req.params;
    const bakeId = Number(bakeIdStr);
    const stepId = Number(stepIdStr);
    const { deviations } = req.body; // Expecting deviations to be valid JSON or a string that can be stored as JSON
    if (deviations === undefined) {
        return res.status(400).json({ message: 'Deviations field is required.' });
    }
    try {
        const bake = await prisma_1.default.bake.findFirst({ where: { id: bakeId, ownerId: ownerId } });
        if (!bake) {
            return res.status(404).json({ message: 'Bake not found or user not authorized.' });
        }
        if (!bake.active) {
            return res.status(400).json({ message: 'Cannot modify an inactive bake.' });
        }
        const updatedStep = await prisma_1.default.bakeStep.update({
            where: { id: stepId, bakeId: bakeId },
            data: { deviations: deviations === null ? client_1.Prisma.JsonNull : deviations }, // Handle null for JSON
        });
        res.json(updatedStep);
    }
    catch (error) {
        next(error);
    }
});
// PUT /api/bakes/:bakeId/steps/:stepId/parameter-values/:parameterValueId/planned
// Updates the plannedValue for a specific BakeStepParameterValue.
router.put('/:bakeId/steps/:stepId/parameter-values/:parameterValueId/planned', async (req, res, next) => {
    const ownerId = req.user?.userId;
    const { bakeId: bakeIdStr, stepId: stepIdStr, parameterValueId: bspvIdStr } = req.params;
    const bakeId = Number(bakeIdStr);
    const stepId = Number(stepIdStr);
    const bspvId = Number(bspvIdStr);
    const { plannedValue } = req.body; // Expecting the new plannedValue
    if (plannedValue === undefined) {
        return res.status(400).json({ message: 'New plannedValue is required.' });
    }
    try {
        const bake = await prisma_1.default.bake.findFirst({ where: { id: bakeId, ownerId: ownerId } });
        if (!bake) {
            return res.status(404).json({ message: 'Bake not found or user not authorized.' });
        }
        if (!bake.active) {
            return res.status(400).json({ message: 'Cannot modify an inactive bake.' });
        }
        // Ensure the BakeStepParameterValue belongs to the specified step
        const bspv = await prisma_1.default.bakeStepParameterValue.findFirst({ where: { id: bspvId, bakeStepId: stepId } });
        if (!bspv) {
            return res.status(404).json({ message: 'Parameter value record not found for this step.' });
        }
        const updatedParamValue = await prisma_1.default.bakeStepParameterValue.update({
            where: { id: bspvId },
            data: { plannedValue: plannedValue === null ? client_1.Prisma.JsonNull : plannedValue },
        });
        res.json(updatedParamValue);
    }
    catch (error) {
        next(error);
    }
});
exports.default = router;
//# sourceMappingURL=bakes.js.map