name: Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: sourdough_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Setup database
        env:
          PGPASSWORD: test_password
        run: |
          # Terminate any existing connections to the database
          psql -h localhost -U postgres -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = 'sourdough_test' AND pid <> pg_backend_pid();" || true
          
          # Drop database if it exists
          psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS sourdough_test;"
          
          # Create fresh database
          psql -h localhost -U postgres -c "CREATE DATABASE sourdough_test;"
      
      - name: Generate Prisma Client
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/sourdough_test
        run: |
          # Remove any cached Prisma client
          rm -rf ./generated/prisma
          # Generate fresh Prisma client with correct DATABASE_URL
          npx prisma generate
      
      - name: Setup database and run migrations
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/sourdough_test
        run: |
          echo "Running migrations..."
          npx prisma migrate deploy
          echo "Migrations completed. Tests will seed their own required data."
      
      - name: Run tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/sourdough_test
          JWT_SECRET: test_jwt_secret_for_ci_do_not_use_in_production
          NODE_ENV: test
          FRONTEND_URL: http://localhost:3000
        run: npm test
      
      - name: Generate coverage report
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/sourdough_test
          JWT_SECRET: test_jwt_secret_for_ci_do_not_use_in_production
          NODE_ENV: test
        run: npm run test:coverage
        continue-on-error: true
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
        continue-on-error: true

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run tests
        working-directory: ./frontend
        env:
          VITE_API_BASE_URL: http://localhost:3000/api
        run: npm test
      
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false
        continue-on-error: true

  # E2E Tests with Playwright
  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root dependencies
        run: npm install

      - name: Build shared package
        run: npm run build:shared

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Install Playwright browsers with dependencies
        working-directory: frontend
        run: npx playwright install --with-deps

      - name: Run E2E tests
        working-directory: frontend
        run: npm run test:e2e
        env:
          CI: true

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

      - name: Upload test screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-screenshots
          path: frontend/test-results/
          retention-days: 30
