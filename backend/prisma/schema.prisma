// This is the FINAL version of your schema.prisma file

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
  MODERATOR // Example of another role
}

enum ParameterDataType {
  STRING
  NUMBER
  BOOLEAN
  JSON
  DATE
  DURATION // Example for time-based parameters
}

enum IngredientCalculationMode {
  PERCENTAGE
  FIXED_WEIGHT
}

enum StepExecutionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
  FAILED
}

enum EntityRequestType {
  INGREDIENT_SUGGESTION
  FEATURE_REQUEST
  BUG_REPORT
  RECIPE_SUBMISSION
  OTHER
}

enum EntityRequestStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  IMPLEMENTED
  CLOSED
}

model User {
  id                Int             @id @default(autoincrement())
  email             String?         @unique
  emailVerified     Boolean         @default(false)
  passwordHash      String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  isActive          Boolean         @default(true)
  lastLoginAt       DateTime?
  role              UserRole        @default(USER)
  notes             String?
  accounts          Account[]
  sessions          Session[]
  userProfile       UserProfile?
  recipes           Recipe[]
  bakes             Bake[]
  submittedRequests EntityRequest[] @relation("SubmittedBy")
  reviewedRequests  EntityRequest[] @relation("ReviewedBy")
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int
  provider          String
  providerAccountId String
  accessToken       String?
  refreshToken      String?
  tokenExpiresAt    DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  ipAddress    String?
  userAgent    String?
  user         User     @relation(fields: [userId], references: [id])
}

model UserProfile {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  displayName String
  avatarUrl   String?
  bio         String?
  preferences Json?
  user        User    @relation(fields: [userId], references: [id])
}

model StepParameter {
  id                      Int                        @id @default(autoincrement())
  name                    String                     @unique
  type                    ParameterDataType
  advanced                Boolean                    @default(false)
  description             String?
  active                  Boolean                    @default(true)
  defaultValue            String?
  order                   Int?
  visible                 Boolean                    @default(true)
  helpText                String?
  stepTemplateParameters  StepTemplateParameter[]
  stepParameterValues     RecipeStepParameterValue[]
  bakeStepParameterValues BakeStepParameterValue[]
}

model RecipeParameter {
  id              Int                    @id @default(autoincrement())
  name            String                 @unique
  label           String?
  type            ParameterDataType
  order           Int?
  visible         Boolean                @default(true)
  advanced        Boolean                @default(false)
  required        Boolean                @default(false)
  helpText        String?
  defaultValue    String?
  parameterValues RecipeParameterValue[]
}

model StepType {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?
  active      Boolean        @default(true)
  order       Int?
  templates   StepTemplate[]
}

model IngredientCategory {
  id            Int                          @id @default(autoincrement())
  name          String                       @unique
  description   String?
  active        Boolean                      @default(true)
  order         Int?
  ingredients   Ingredient[]
  templateRules StepTemplateIngredientRule[]
}

model Ingredient {
  id                    Int                    @id @default(autoincrement())
  name                  String                 @unique
  ingredientCategoryId  Int
  advanced              Boolean                @default(false)
  description           String?
  active                Boolean                @default(true)
  order                 Int?
  visible               Boolean                @default(true)
  helpText              String?
  defaultValue          String?
  category              IngredientCategory     @relation(fields: [ingredientCategoryId], references: [id])
  recipeStepIngredients RecipeStepIngredient[]
  bakeStepIngredients   BakeStepIngredient[]
}

model StepTemplate {
  id              Int                          @id @default(autoincrement())
  name            String                       @unique
  stepTypeId      Int
  advanced        Boolean                      @default(false)
  description     String?
  active          Boolean                      @default(true)
  order           Int?
  stepType        StepType                     @relation(fields: [stepTypeId], references: [id])
  parameters      StepTemplateParameter[]
  ingredientRules StepTemplateIngredientRule[]
  recipeSteps     RecipeStep[]
}

model StepTemplateParameter {
  id             Int           @id @default(autoincrement())
  stepTemplateId Int
  parameterId    Int
  advanced       Boolean       @default(false)
  description    String?
  active         Boolean       @default(true)
  defaultValue   String?
  order          Int?
  visible        Boolean       @default(true)
  helpText       String?
  stepTemplate   StepTemplate  @relation(fields: [stepTemplateId], references: [id])
  parameter      StepParameter @relation(fields: [parameterId], references: [id])
}

model StepTemplateIngredientRule {
  id                   Int                @id @default(autoincrement())
  stepTemplateId       Int
  ingredientCategoryId Int
  required             Boolean            @default(false)
  description          String?
  active               Boolean            @default(true)
  visible              Boolean            @default(true)
  advanced             Boolean            @default(false)
  helpText             String?
  defaultValue         String?
  stepTemplate         StepTemplate       @relation(fields: [stepTemplateId], references: [id])
  ingredientCategory   IngredientCategory @relation(fields: [ingredientCategoryId], references: [id])
}

model Recipe {
  id              Int                    @id @default(autoincrement())
  ownerId         Int
  active          Boolean                @default(true)
  parentRecipeId  Int?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  isPredefined    Boolean                @default(false)
  totalWeight     Float? // Added as per plan
  hydrationPct    Float? // Added as per plan
  saltPct         Float? // Added as per plan
  owner           User                   @relation(fields: [ownerId], references: [id])
  parentRecipe    Recipe?                @relation("RecipeVersion", fields: [parentRecipeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  clonedRecipes   Recipe[]               @relation("RecipeVersion")
  parameterValues RecipeParameterValue[]
  steps           RecipeStep[]
  bakes           Bake[]
}

model RecipeParameterValue {
  id          Int             @id @default(autoincrement())
  recipeId    Int
  parameterId Int
  value       String
  recipe      Recipe          @relation(fields: [recipeId], references: [id])
  parameter   RecipeParameter @relation(fields: [parameterId], references: [id])
  @@unique([recipeId, parameterId])
}

model RecipeStep {
  id              Int                        @id @default(autoincrement())
  recipeId        Int
  stepTemplateId  Int
  order           Int
  description     String?
  notes           String?
  recipe          Recipe                     @relation(fields: [recipeId], references: [id])
  stepTemplate    StepTemplate               @relation(fields: [stepTemplateId], references: [id])
  parameterValues RecipeStepParameterValue[]
  ingredients     RecipeStepIngredient[]
  bakeSteps       BakeStep[]
}

model RecipeStepParameterValue {
  id           Int           @id @default(autoincrement())
  recipeStepId Int
  parameterId  Int
  value        Json
  notes        String?
  recipeStep   RecipeStep    @relation(fields: [recipeStepId], references: [id])
  parameter    StepParameter @relation(fields: [parameterId], references: [id])
}

model RecipeStepIngredient {
  id           Int        @id @default(autoincrement())
  recipeStepId Int
  ingredientId Int
  amount       Float // Renamed from percentage as per plan
  calculationMode IngredientCalculationMode @default(PERCENTAGE) // Added as per plan, with default
  preparation  String?
  notes        String?
  recipeStep   RecipeStep @relation(fields: [recipeStepId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
}

model Bake {
  id              Int                  @id @default(autoincrement())
  recipeId        Int
  ownerId         Int
  startTimestamp  DateTime             @default(now())
  finishTimestamp DateTime?
  active          Boolean              @default(true)
  parentBakeId    Int?
  notes           String?
  recipe          Recipe               @relation(fields: [recipeId], references: [id])
  owner           User                 @relation(fields: [ownerId], references: [id])
  parentBake      Bake?                @relation("BakeVersion", fields: [parentBakeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  clonedBakes     Bake[]               @relation("BakeVersion")
  steps           BakeStep[]
}

model BakeStep {
  id              Int                      @id @default(autoincrement())
  bakeId          Int
  recipeStepId    Int
  order           Int
  status          StepExecutionStatus @default(PENDING)
  startTimestamp  DateTime?
  finishTimestamp DateTime?
  deviations      Json?
  notes           String?
  bake            Bake                     @relation(fields: [bakeId], references: [id])
  recipeStep      RecipeStep               @relation(fields: [recipeStepId], references: [id])
  parameterValues BakeStepParameterValue[]
  ingredients     BakeStepIngredient[]
}

model BakeStepParameterValue {
  id           Int           @id @default(autoincrement())
  bakeStepId   Int
  parameterId  Int
  plannedValue Json
  actualValue  Json?
  notes        String?
  bakeStep     BakeStep      @relation(fields: [bakeStepId], references: [id])
  parameter    StepParameter @relation(fields: [parameterId], references: [id])
}

model BakeStepIngredient {
  id                 Int        @id @default(autoincrement())
  bakeStepId         Int
  ingredientId       Int
  plannedPercentage  Float
  plannedPreparation String?
  notes              String?
  bakeStep           BakeStep   @relation(fields: [bakeStepId], references: [id])
  ingredient         Ingredient @relation(fields: [ingredientId], references: [id])
}

model EntityRequest {
  id          Int       @id @default(autoincrement())
  userId      Int?
  type        EntityRequestType
  name        String
  description String?
  extra       Json?
  status      EntityRequestStatus @default(PENDING)
  reviewerId  Int?
  reviewedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User?     @relation("SubmittedBy", fields: [userId], references: [id])
  reviewer    User?     @relation("ReviewedBy", fields: [reviewerId], references: [id])
}